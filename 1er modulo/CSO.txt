CSO
Práctica:

  Qué es un SO?
  	-Es un programa que actúa como intermediario entre el usuario y el HW (O conjunto de programas que realizan muchas tareas)
  	-Parte esencial de un sistema de cómputo
  	
	-Propósito: crear un entorno cómodo y eficiente para la ejecución de programas
	-Obligación: garantizar el correcto y eficiente funcionamiento del sistema
	-Funciones principales: Administrar memoria, CPU y dispositivos E/S
	
  GNU/LINUX  -> GNU = GNU No es Unix
  	-S.O tipo Unix, libre, gratuito
  	-Existen diversas distribuciones
  	-Es de código abierto: Nos permite estudiarlo, personalizarlo, podemos ver cómo está hecho
  	-Para que sea libre se necesitó crear un marco regulatorio llamado GPL (General Public License)
  	
	   + Características:
	   	-Es multiusuario
	   	-Es multitarea y multiprocesador
	   	-Portable
	   	-Diversos intérpretes de comandos, de los cuales algunos son programables
	   	-Permite el manejo de usuarios y permisos
	   	-Todo es un archivo
	   	-Cada directorio puede estar en una partición diferente
	   	-Case sensitive
	   	-Es código abierto
	   	
	   + Existen 4 libertades principales de los usuarios:
	   	-Libertad de usar el programa con cualquier propósito
	   	-Libertad de estudiar su funcionamiento
	   	-Libertad de distribuir sus copias
	   	-Libertad para mejorar los programas
	   	
	   + Diseño
	   	-Desarrollo en capas:
	   		Separación de funciones
	   		Cada capa actúa como una caja negra hacia las otras
	   		Posibilita el desarrollo distribuido
	   	-Soporte para diversos File Systems
	   	-Memoria virtual = RAM + SWAP
	   	
   	
   SOFTWARE LIBRE:
   	-Una vez obtenido, puede ser usado, copiado, estudiado, modificado y redistribuido libremente
   	-Generalmente es de costo nulo (ERROR creer que Software Libre significa Software gratuito)
   	-Corrección rápida de fallas
   	
   SOFTWARE PROPIETARIO:
   	-Tiene un costo asociado
   	-No se lo puede distribuir libremente
   	-No se lo puede modificar (generalmente)
   	-No se distribuye con su código fuente (generalmente)
   	-El propietario se encarga de las fallas
   	
   GPL: Generic Public License
   	-Objetivo: Proteger la libre distribución, modificación y uso del software GNU
   	-Propósito: Declarar que todo software publicado bajo esta licencia, es libre y está protegido teniendo en cuenta las 4 libertades principales anteriores
   	
   	
   KERNELL: Núcleo
   	-Ejecuta programas y gestiona dispositivos de HW
   	-Encargado de que el software y el HW puedan trabajar juntos
   	-Funciones: Administrador de memoria, CPU y E/S
   	-Núcleo monolítico híbrido:
   		Los drivers y código del Kernell se ejecutan en modo privilegiado
   		Híbrido: tiene la capacidad de cargar y descargar funcionalidad a través de módulos
   	
   CLI: Intérprete de comandos
   	-Modo de comunicación entre el user y el SO
   	-Ejecuta programas a partir del ingreso de comandos
   	-Cada usuario puede tener una interfaz o Shell
   	-Personalizables y programables
   	
   Sistemas de archivos:
   	-Organiza la forma en que se almacenan los archivos en dispositivos de almacenamiento
   	-GNU/Linux adopta el Extended
   	-Directorios más importantes según FHS (Filesystem Hierarchy Standard)
   		• / Tope de la estructura de directorios. Es como el C:\
		• /home Se almacenan archivos de usuarios (Mis documentos)
		• /var Información que varía de tamaño (logs, BD, spools)
		• /etc Archivos de configuración
		• /bin Archivos binarios y ejecutables
		• /dev Enlace a dispositivos
		• /usr Aplicaciones de usuarios
		
Una distribución es una customización de GNU/Linux formada por una versión de Kernell y determinados programas con sus configuraciones

   MBR:
   	-Sector reservado del disco físico
   	-Existe un MBR en todos los discos
   	-Si existiese más de un disco rígido en la máquina, sólo uno es designado Primary Master Disk
   	-Tamaño del MBR coincide con el estándar de sector, 512 bytes. Los primeros bytes corresponden al MBC (Master Boot Code).
   	-El MBC es un pequeño código que permite arrancar el SO
   	-La última acción del BIOS es leer el MBC. Lo lleva a mem. y lo ejecuta

  Particiones: 
  	-Forma de dividir lógicamente el disco físico:
  		DOS y W95 no pueden manejar filesystems mayores a 2GB
		Cada SO es instalado en una partición separada
		Cada partición se formatea con un tipo de filesystem destino
		Poder ubicar el Kernel en una partición de solo lectura o una que ni siquiera se monta
		Debido al tamaño acotado en el MBR para la tabla de particiones:
			• Se restringe a 4 la cantidad de particiones primarias
			• 3 primarias y una extendida con sus respectivas particiones lógicas
		Una de las 4 participaciones puede ser extendida, la cual se subdivide en volúmenes lógicos
		Partición primaria: División cruda del disco (hasta 4 por disco) Se almacena info de la misma en el MBR
		Partición extendida: contiene unidades lógicas en su interior. Sólo puede existir una partición de este tipo por disco y no se define un tipo de FS directamente sobre ella
		Partición lógica: ocupa la totalidad o parte de la partición extendida y se le define un tipo de FS. Las particiones de este tipo se conectan como una lista enlazada
		Como mínimo es necesario una partición (para el /)
		Es recomendable crear al menos 2 (/ y SWAP)
		Para crearlas se utiliza un software particionador
			-> destructivos: Permiten crear y eliminar particiones (Fdisk)
			-> No destructivo: permiten crear, eliminar y modificar particiones
	-Particionando
		--> 3 escenarios posibles:
			• Espacio libre no particionado
			• Partición no usada
			• Espacio libre de una partición activa
			  -Cambio destructivo
			  -Cambio no destructivo
		
   Emuladores/Virtualizadores:
   	-Emulación: 
   		• Emulan HW
   		• Tienen que implementar todas las instrucciones de la CPU
   		• Es muy costosa y poco eficiente
   		• Permite ejecutar arquitecturas diferentes a las soportadas por el HW
   	- Virtualización completa:
   		• Permiten ejecutar SO huéspedes en un sistema anfitrión (Host)
   		• Utilizan en el medio un hypervisor o monitor de máquinas virtuales
   		• el SO huésped debe estar soportado en la arquitectura anfitriona
   		• es más eficiente que la emulación
   	- Paravirtualización
   		• Permite correr SOs modificados exclusivamente par actuar en entornos virtualizados
   		• Mayor eficiencia que la virtualización
   		
   	--> Principales Diferencias:
   		• Virtualizadores: Se puede correr la arquitectura virtualizada. Mayor aprovechamiento del CPU por ende son más veloces. 
   		• Emulador: Se puede correr cualquier arquitectura.
   	
   	
   Gestor de arranque:
   	- Finalidad del bootloader: cargar una imagen Kernel (SO) de alguna partición para ejecutar
   	- Se ejecuta luego del código del BIOS
   	- 2 modos de instalación:
   		• En el MBR
   		• En el sector de arranque de la partición raíz o activa.
   	
   Grub Legacy:
   	- GRand Unified Bootloader: gestor de arranque múltiple
   	- En el MBR sólo se encuentra la fase 1 del que sólo se encarga de cargar la fase 1.5
   		• Fase 1.5: Ubicada en los siguiente 30KB del disco (MBR gap). Carga la fase 2
   		• Fase 2: Interfaz del usuario y carga el Kernel seleccionado
   	Se configura a través del archivo /boot/grub/menu.lst
   	
   Grub 2:
   	- Utilizado en la mayoría de las distribuciones
   	- Incluye el soporte a nuevas arquitecturas
   	- La fase 1.5 ya no existe más
   	- Archivo de config ahora es: /boot/grub/grub.cfg
   	
   
   Proceso de arranque:
   	- Proceso de inicio de una máquina y carga del sistema operativo y se denomina bootstrap
   	- Arquitecturas x86: BIOS responsable de iniciar la cargar del SO a través del MBC
   		• Está grabado en un chip (ROM, NVRAM)
   	- Carga el programa de booteo desde el MBR
   	- El gestor de arranque lanzado desde el MBC carga el Kernel
   		• Prueba y hace disponibles los dispositivos
   		• Pasa el control al proceso init
   	- El proceso de arranque se ve como una serie de pequeños programas de ejecución encadenada
   	
   	Problemas: La última acción del BIOS es leer el MBC del MBR. El firmware del BIOS no facilita la lectura de filesystems. El MBC no puede ocupar más de 446 bytes. 
   	
   
   EFI: Extensible Firmware Interface
   	- Nexo entre el SO y el firmware
   	- Utiliza el sistema GPT (GUID partition table) para solucionar limitaciones del ,BR, como la cantidad de particiones
   	- GPT especifica la ubicación y formato de la table de particiones en un disco duro
   	- Es parte de EFI. Puede verse como una sustitución del MBR
   	
   
   GPT:
   	- Se mantiene un MBR para tener compatibilidad con el esquema BIOS
   	- Usa un modo de direccionamiento lógico (logical block addressing LBA)
   	- MBR heredado se almacena en el LBA 0
   	- En el LBA 1 está la cabecera GPT
   	
  UEFI: (Unified Extensible Firmware Interface)
  	- UEFI Forum: Objetivo: modernizar el proceso de arranque
	- Define la ubicación de gestor de arranque
	- Define la interfaz entre el gestor de arranque y el firmware
	- Expone información para los gestores de arranque con:
		• Información de HW y configuración del firmware
		• Provee un BootManager para cargar aplicaciones UEFI y drivers desde un UEFI filesystem
		• El booleader ahora es una aplicación UEFI
			-> Grub pasa a ser una ap. UEFI, reside el UEFI filesystem.
			-> Deja de ser necesario el arranque en varias etapas.
			
   Secure Boot:
   	• Propone mecanismos para un arranque libre de código	malicioso
	• Las aplicaciones y drivers UEFI (imágenes UEFI) son validadas para verificar que no fueron alteradas
	• Se utilizan pares de claves asimétricas
	• Se almacenan en el firmware una serie de claves publicas que sirven para validar que las imágenes estén firmadas por un proveedor autorizado
	• Si la clave privada está vencida o fue revocada la verificación	puede fallar